//
//  ChatListViewController.swift
//  TesQiscus
//
//  Created by Fahim Jatmiko on 12/02/20.
//  Copyright (c) 2020 Fahim. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import QiscusCore
import UIKit
import AlamofireImage
import IJProgressView

protocol ChatListDisplayLogic: class
{
    func display(viewModel: ChatList.FetchChatList.ViewModel)
    func display(viewModel: ChatList.CreateNewRoom.ViewModel)
}

class ChatListViewController: UITableViewController, ChatListDisplayLogic
{
    var interactor: ChatListBusinessLogic?
    var router: (NSObjectProtocol & ChatListRoutingLogic & ChatListDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ChatListInteractor()
        let presenter = ChatListPresenter()
        let router = ChatListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
        QiscusCore.delegate = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.tableView.tableFooterView = UIView()
        fetchChatList()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    var chatList:[RoomModel]?
    
    func fetchChatList()
    {
        let request = ChatList.FetchChatList.Request()
        interactor?.fetchChatList(request: request)
    }
    
    @IBAction func newChatAction(_ sender: Any) {
        let ac = UIAlertController(title: "Enter the username you want to chat with", message: nil, preferredStyle: .alert)
        ac.addTextField()

        let submitAction = UIAlertAction(title: "Submit", style: .default) { [unowned ac] _ in
            let username = ac.textFields![0].text
            self.interactor?.createNewRoom(request: ChatList.CreateNewRoom.Request(username: username ?? ""))
        }
        let cancelAction = UIAlertAction(title: "Cancel", style: .default)

        ac.addAction(submitAction)
        ac.addAction(cancelAction)
        
        present(ac, animated: true)
    }
    
    func display(viewModel: ChatList.FetchChatList.ViewModel)
    {
        //nameTextField.text = viewModel.name
        chatList = viewModel.rooms
        print(viewModel)
        tableView.reloadData()
    }
    
    func display(viewModel: ChatList.CreateNewRoom.ViewModel)
    {
        router?.routeToNewChat()
    }
}


// UITableViewDataSource
extension ChatListViewController {
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return chatList?.count ?? 0
    }
    
    override func tableView(_ tableView: UITableView,
                            cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ChatRoomCell", for: indexPath) //as! CELL
        let room = chatList?[indexPath.row]
        cell.imageView?.af_setImage(withURL: try! (room!.avatarUrl!.asURL()))
        cell.imageView?.contentMode = .scaleAspectFill
        cell.textLabel!.text = room?.name
        cell.detailTextLabel!.text = room?.lastComment?.message
        
//        cell.scholarship = scholarship
        return cell
    }
    
//    override func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
//        let lastSectionIndex = tableView.numberOfSections - 1
//        let lastRowIndex = tableView.numberOfRows(inSection: lastSectionIndex) - 1
//        if indexPath.section ==  lastSectionIndex && indexPath.row == lastRowIndex {
//            // print("this is the last cell")
//            if let totalData = totalData, indexPath.row < totalData - 1 {
//
//                var request = ScholarshipList.FetchScholarships.Request()
//                if let textToSearch = searchController.searchBar.text, !textToSearch.isEmpty  {
//                    request.textToSearch = textToSearch
//                }
//                interactor?.loadMoreScholarships(request: request)
//                let spinner = UIActivityIndicatorView(style: .gray)
//                spinner.startAnimating()
//                spinner.frame = CGRect(x: CGFloat(0), y: CGFloat(0), width: tableView.bounds.width, height: CGFloat(44))
//
//                self.tableView.tableFooterView = spinner
//                self.tableView.tableFooterView?.isHidden = false
//            }
//        }
//    }
}
